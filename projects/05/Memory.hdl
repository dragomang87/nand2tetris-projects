// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl
/**
 * The Memory chip implements the complete address space of the Hack data memory,
 * including RAM, memory mapped screen, and memory mapped keyboard.
 * Outputs the value of the memory location specified by the address input.
 * If (load == 1), sets the memory location specified by the address input
 * to the value of the in input.
 * Address space rules:
 * Only the upper 16K + 8K + 1 words of the memory are used.
 * Access to address 0 to 16383 (0x0000 to 0x3FFF) results in accessing the RAM;
 * Access to address 16384 to 24575 (0x4000 to 0x5FFF) results in accessing the Screen memory map;
 * Access to address 24576 (0x6000) results in accessing the Keyboard memory map.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:


    // RAM16k chip, Address 0 ... 2^14 -1 = 16383
    // IN in[16], load, address[14];
    // OUT out[16];
    // The input address is RAM is the address is 14 bits, i.e. if address[14]=0
    Not(in=address[14], out=isRAM);
    And(a=isRAM, b=load, out=isRAMandLoad);
    RAM16K(in=in, load=isRAMandLoad, address=address[0..13], out=outRAM);

    // Screen chip, Address 2^14 = 16384 ... 2^14 + 2^13 - 1 = 24575
    // IN  in[16],    // what to write
    // load,          // write-enable bit
    // address[13];   // where to read/write
    // OUT out[16];   // Screen value at the given address
    // The address is Screen if the value is 2^14 or above, but not 2^14 + 2^13 or above
    // namely if address[14]=1 and address[13]=0
    Not(in=address[13], out=ifNotRAMisScreen);
    And(a=address[14], b=ifNotRAMisScreen, out=isScreen);
    And(a=isScreen, b=load, out=isScreenAndLoad);
    Screen(in=in, load=isScreenAndLoad, address=address[0..12], out=outScreen);

    // Keyboard chip Address 24576 = 2^14 + 2^13
    // OUT out[16];
    // The address is keyboard if it is neither RAM or Screen
    // i.e. if both address[14]=1 and address[13]=1
    //      and address[0..12]=0
    Keyboard(out=outKeyboard);

    // Mux outputs depending on address
    // And(a=address[14], b=address[13], out=neitherRAMorScreen);
    Mux16(a=outScreen, b=outKeyboard, sel=address[13], out=outScreenKeyboard);
    Mux16(a=outRAM, b=outScreenKeyboard, sel=address[14], out=out);
}
