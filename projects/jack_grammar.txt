PROGRAM STRUCTURE

A Jack program is a collection of classes, each appearing in a separate
file, and each compiled separately. Each class is structured as follows:

class:              'class' className '{'
                        classVarDec*
                        subroutineDec*
                        '}'
classVarDec:        ('static'|'field') type varName (',' varName)* ';'
type:               'int'|'char'|'boolean' | className
subroutineDec:      ('constructor' | 'function'| 'method')
                    ('void'|type) subroutineName '(' parameterList ')' subroutineBody
parameterList:      ((type varName) (',' type varName)*)?
subroutineBody:     '{' varDec* statements '}'
varDec:             'var' type varName (',' varName)* ';'
className:          identifier
subroutineName:     identifier
varName:            identifier



STATEMENTS

statements:         statement*
statement:          letStatement
                    | ifStatement
                    | whileStatement
                    | doStatement
                    | returnStatement
letStatement:       'let' varName ('[' expression ']')? '=' expression ';'
ifStatement:        'if'    '(' expression ')' '{' statements '}'
                    ('else'                    '{' statements '}' )?
whileStatement:     'while' '(' expression ')' '{' statements '}'
doStatement:        'do' subroutineCall  ';'
returnStatement:    'return' expression? ';'



EXPRESSIONS

expression:         term (op term)*
term:               integerConstant
                    | stringConstant
                    | keywordConstant
                    | varName
                    | varName '[' expression ']'
                    | subroutineCall
                    | '(' expression ')'
                    | unaryOp term
subroutineCall:     subroutineName                            '(' expressionList ')' |
                    ( className | varName) '.' subroutineName '(' expressionList ')'
expressionList:     (expression (',' expression)* )?
op:                 '+' | '-' | '*' | '/' |
                    '&' | '|' |
                    '<' | '>' | '=' |
unaryOp:            '-' | '~' |
keywordConstant:    'true'|'false'|'null'|'this'



LEXICAL ELEMENTS (TOKENS)

keyword:            'class' | 'constructor' | 'function'| 'method' | 'field' | 'static'
                    | 'var' | 'int' | 'char' | 'boolean' | 'void'
                    | 'true' | 'false' | 'null' | 'this'
                    | 'let' | 'do' | 'if' | 'else' | 'while' | 'return'
symbol:             '{' | '}' | '(' | ')' | '[' | ']' |
                    '.' | ',' | ';' |
                    '+' | '-' | '*' | '/' |
                    '&' | '|' | '~' | '<' | '>' | '=' |
integerConstant:    decimal in 0 ... 32767
StringConstant:     a quoted sequence of Unicode characters not including double quote or newline
identifier:         a sequence of letters, digits, and _ not starting with a digit.


