// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
//
// ALU (Arithmetic Logic Unit):
// Computes out = one of the following functions:
//      0, 1, -1,
//      x, y, !x, !y, -x, -y,
//      x + 1, y + 1, x - 1, y - 1,
//      x + y, x - y, y - x,
//      x & y, x | y
// on the 16-bit inputs x and y according to the input bits
//      zx: "zero x          "
//      nx: "bitwise negate x"
//      zy: "zero y          "
//      ny: "negate y        "
//      f : "function + or & "
//      no: "negate output   "
// In addition, computes the two output bits:
//      if (out == 0) zr = 1, else zr = 0
//      if (out < 0)  ng = 1, else ng = 0
//
// Implementation:
//      if (zx == 1) sets x = 0        // 16-bit constant
//      if (nx == 1) sets x = !x       // bitwise not
//      if (zy == 1) sets y = 0        // 16-bit constant
//      if (ny == 1) sets y = !y       // bitwise not
//      if (f == 1)  sets out = x + y  // integer 2's complement addition
//      if (f == 0)  sets out = x & y  // bitwise and
//      if (no == 1) sets out = !out   // bitwise not

// Proofs of -x, x+1, x-1, and x-y
// Notes:
//      1111... = 2^n -1 = -1
//      x + 1111... = x -1
//      Not x = 1111... -x =  2^n -1 -x = -1-x
// 00 11 11 =  -x: = Not (x + 1111...) = Not (x -1) = -1 -(x-1)= -x
// 01 11 11 = x+1: = Not (Not x + 1111...) = Not (-1 -x -1) = -1 +1 +x +1 = x+1
// 00 11 10 = x-1: = x + 1111... = x-1
// 01 00 11 = x-y: = Not (Not x + y) = Not (-1 -x +y) = -1 -(-1 -x +y) = x-y

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:

    Not16 (in=x, out=notx);
    Not16 (in=y, out=noty);

    Mux4Way16 (a=x, b=notx, c=false, d=true, sel[1]=zx, sel[0]=nx, out=znx);
    Mux4Way16 (a=y, b=noty, c=false, d=true, sel[1]=zy, sel[0]=ny, out=zny);

    Add16 (a=znx, b=zny, out=fsum);
    And16 (a=znx, b=zny, out=fand);

    Mux16 (a=fand, b=fsum, sel=f, out=fout);
    Not16 (in=fout, out=nfout);
    Mux16 (a=fout, b=nfout, sel=no, out[15]=ng, out[0..7]=outlow, out[8..15]=outup, out=out);

    Or8Way(in=outlow, out=orlow);
    Or8Way(in=outup,  out=orup);
    Or (a=orlow, b=orup, out=nzr);
    Not (in=nzr, out=zr);

}
